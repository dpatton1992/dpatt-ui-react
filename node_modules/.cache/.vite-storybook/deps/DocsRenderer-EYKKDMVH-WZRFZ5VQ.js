import {
  AnchorMdx,
  CodeOrSourceMdx,
  Docs,
  HeadersMdx
} from "./chunk-GUDYAHVV.js";
import "./chunk-XCUXYO3W.js";
import "./chunk-6NNMLPLH.js";
import "./chunk-4SVFCSDT.js";
import "./chunk-6IY7K52Y.js";
import "./chunk-4EYQ24W2.js";
import "./chunk-EQFIVE4A.js";
import "./chunk-6OQRRTUQ.js";
import "./chunk-5WGGJWW4.js";
import "./chunk-OCQ7MYUU.js";
import "./chunk-HD23S7AD.js";
import "./chunk-4IXOXVU3.js";
import "./chunk-ZQQ77D3M.js";
import "./chunk-E62EWPZO.js";
import {
  renderElement,
  unmountElement
} from "./chunk-6BJCK2SL.js";
import "./chunk-AVZANOP4.js";
import "./chunk-EFT6OOP4.js";
import "./chunk-7T5AMMO7.js";
import {
  require_react
} from "./chunk-D3K572XJ.js";
import "./chunk-D77VNDYA.js";
import "./chunk-5H5OTQLV.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/.pnpm/@storybook+addon-docs@7.0.18_biqbaboplfbrettd7655fr4n2y/node_modules/@storybook/addon-docs/dist/chunk-PCJTTTQV.mjs
var import_react = __toESM(require_react(), 1);
var defaultComponents = { code: CodeOrSourceMdx, a: AnchorMdx, ...HeadersMdx };
var ErrorBoundary = class extends import_react.Component {
  constructor() {
    super(...arguments);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidCatch(err) {
    let { showException } = this.props;
    showException(err);
  }
  render() {
    let { hasError } = this.state, { children } = this.props;
    return hasError ? null : children;
  }
};
var DocsRenderer = class {
  constructor() {
    this.render = async (context, docsParameter, element) => {
      let components = { ...defaultComponents, ...docsParameter == null ? void 0 : docsParameter.components };
      return new Promise((resolve, reject) => {
        import("./react-QFBPVQFC.js").then(({ MDXProvider }) => renderElement(import_react.default.createElement(ErrorBoundary, { showException: reject, key: Math.random() }, import_react.default.createElement(MDXProvider, { components }, import_react.default.createElement(Docs, { context, docsParameter }))), element)).then(resolve);
      });
    }, this.unmount = (element) => {
      unmountElement(element);
    };
  }
};
export {
  DocsRenderer,
  defaultComponents
};
//# sourceMappingURL=DocsRenderer-EYKKDMVH-WZRFZ5VQ.js.map
